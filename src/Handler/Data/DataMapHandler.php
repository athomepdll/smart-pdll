<?php


namespace App\Handler\Data;

use App\Entity\ImportModel;
use App\Handler\AbstractHandler;
use App\Repository\DataColumnRepository;
use App\Repository\DataRepository;
use App\Repository\ImportModelRepository;
use App\Services\DataViewService;
use App\Services\MapViewService;
use Doctrine\Common\Collections\ArrayCollection;
use Symfony\Component\Form\FormInterface;

/**
 * Class DataMapHandler
 * @package App\Handler\Data
 */
class DataMapHandler extends AbstractHandler
{
    /**
     * @var DataColumnRepository
     */
    protected $dataColumnRepository;
    /**
     * @var DataRepository
     */
    protected $dataRepository;
    /**
     * @var ImportModelRepository
     */
    protected $importModelRepository;
    /**
     * @var MapViewService
     */
    protected $mapViewService;

    /**
     * DataHandler constructor.
     * @param DataColumnRepository $dataColumnRepository
     * @param DataRepository $dataRepository
     * @param MapViewService $mapViewService
     * @param ImportModelRepository $importModelRepository
     */
    public function __construct(
        DataColumnRepository $dataColumnRepository,
        DataRepository $dataRepository,
        ImportModelRepository $importModelRepository,
        MapViewService $mapViewService
    ) {
        $this->dataColumnRepository = $dataColumnRepository;
        $this->dataRepository = $dataRepository;
        $this->mapViewService = $mapViewService;
        $this->importModelRepository = $importModelRepository;
    }

    /**
     * @param FormInterface $form
     * @return array
     * @throws \Doctrine\DBAL\DBALException
     */
    public function handle(FormInterface $form)
    {
        if (!$this->validate($form)) {
            return [];
        }

        $filters = $form->getData();

        $data = ['indicator' => [], 'financial' => []];

        if (!$filters['financialImportModels']->isEmpty()) {
            $this->mergeFinancialData($filters['financialImportModels'], $data, $filters);
        }

        if (!$filters['indicatorImportModels']->isEmpty()) {
            $this->mergeIndicatorData($filters['indicatorImportModels'], $data, $filters);
        }

        return $data;
    }

    /**
     * @param FormInterface $form
     * @return bool
     */
    public function validate(FormInterface $form): bool
    {
        return parent::validate($form); // TODO: Change the autogenerated stub
    }

    /**
     * @param ArrayCollection $importModels
     * @param array $data
     * @param array $filters
     * @throws \Doctrine\DBAL\DBALException
     */
    protected function mergeFinancialData(ArrayCollection $importModels, array &$data, array $filters)
    {

        $filteredImportModels = $importModels->filter(function (ImportModel $importModel) {
            return $importModel->isMapView();
        })->toArray();

        $importModelsIds = array_map(function (ImportModel $importModel) {
            return $importModel->getId();
        }, $filteredImportModels);


        $filters['importModels'] = $importModelsIds;

        $financialData = $this->mapViewService->getFinancialMapData($filters);

        $data['localizedInfos'] = $this->mapViewService->getLocalizedInfos($filters);
        $data['financial'] = array_merge($data['financial'], $financialData);
    }

    /**
     * @param ArrayCollection $importModels
     * @param array $data
     * @param array $filters
     * @throws \Doctrine\DBAL\DBALException
     */
    protected function mergeIndicatorData(ArrayCollection $importModels, array &$data, array $filters)
    {
        /** @var ImportModel $importModel */
        foreach ($importModels as $importModel) {
            if (!$importModel->isMapView()) {
                continue;
            }

            $filters['importModel'] = $importModel;

            $financialData = $this->mapViewService->getIndicatorMapData($filters);
            $data['localizedInfos'] = null;
            $data['indicator'] = array_merge($data['indicator'], $financialData);
        }
    }
}
